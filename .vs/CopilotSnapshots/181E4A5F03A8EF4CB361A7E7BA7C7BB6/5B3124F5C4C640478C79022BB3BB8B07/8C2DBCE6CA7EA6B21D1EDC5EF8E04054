using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WaldBrand
{
    internal class Program
    {

        static char[,] forest;
        static int width;
        static int height;
        static double sparkProbability;
        static double growthProbability;
        static Random random = new Random();

        static void Main(string[] args)
        {
            // Console.SetWindowSize(80, 25);
            // Console.SetBufferSize(80, 25);

            Console.WriteLine("Enter forest width:");
            width = int.Parse(Console.ReadLine());
            Console.WriteLine("Enter forest height:");
            height = int.Parse(Console.ReadLine());
            Console.WriteLine("Enter spark probability (0-10):");
            sparkProbability = double.Parse(Console.ReadLine());
            Console.WriteLine("Enter growth probability (0-10):");
            growthProbability = double.Parse(Console.ReadLine());
            forest = new char[height, width];

            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    double randomValue = random.NextDouble();
                    if (randomValue < 0.6)
                    {
                        forest[row, col] = 'B'; //Baum
                    }
                    else if (randomValue < 0.8)
                    {
                        forest[row, col] = 'S'; //Stein
                    }
                    else
                    {
                        forest[row, col] = '-'; //Waldboden
                    }
                }
            }

            while (!Console.KeyAvailable)
            {
                StartRandomFires();
                SpreadFires();
                UpdateBurntTrees();
                GrowNewTrees();
                DisplayForest();
                System.Threading.Thread.Sleep(500);
            }
        }
        static void DisplayForest()
        {
            Console.Clear();
            Console.WriteLine($"Forest: {width}x{height} - Press any key to stop");
            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    Console.Write(forest[row, col]);
                }
                Console.WriteLine();
            }
        }
        static void StartRandomFires()
        {
            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    if (forest[row, col] == 'B' && random.NextDouble() < sparkProbability / 10.0)
                    {
                        forest[row, col] = 'F';
                    }
                }
            }
        }
        static void SpreadFires()
        {
            char[,] newForest = new char[height, width];

            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    newForest[row, col] = forest[row, col];
                }
            }

            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    if (forest[row, col] == 'F')
                    {
                        for (int dr = -1; dr <= 1; dr++)
                        {
                            for (int dc = -1; dc <= 1; dc++)
                            {
                                int neighborRow = row + dr;
                                int neighborCol = col + dc;

                                if (neighborRow >= 0 && neighborRow < height && neighborCol >= 0 && neighborCol < width)
                                {
                                    if (forest[neighborRow, neighborCol] == 'B')
                                    {
                                        newForest[neighborRow, neighborCol] = 'F';
                                    }
                                }
                            }
                        }
                    }
                }
            }

            forest = newForest;
        }
        static void UpdateBurntTrees()
        {
            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    if (forest[row, col] == 'F')
                    {
                        forest[row, col] = 'f';
                    }
                    else if (forest[row, col] == 'f')
                    {
                        forest[row, col] = '-';
                    }
                }
            }
        }
        static void GrowNewTrees()
        {
            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    if (forest[row, col] == '-' && random.NextDouble() < growthProbability / 10.0)
                    {
                        forest[row, col] = 'B';
                    }
                }
            }
        }
    }
}
