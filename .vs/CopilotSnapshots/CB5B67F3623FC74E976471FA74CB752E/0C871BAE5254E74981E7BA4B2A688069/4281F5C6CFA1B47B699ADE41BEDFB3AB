using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WaldBrand
{
    internal class Program
    {

        static char[,] forest;
        static int[,] fireAge; // Track how long fires have been burning
        static int[,] emptyAge; // Track how long spots have been empty
        static int width;
        static int height;
        static double sparkProbability;
        static double growthProbability;
        static Random random = new Random();

        static void Main(string[] args)
        {
            Console.WriteLine("Enter forest width:");
            width = int.Parse(Console.ReadLine());
            Console.WriteLine("Enter forest height:");
            height = int.Parse(Console.ReadLine());
            Console.WriteLine("Enter spark probability (0-10):");
            sparkProbability = double.Parse(Console.ReadLine());
            Console.WriteLine("Enter growth probability (0-10):");
            growthProbability = double.Parse(Console.ReadLine());

            forest = new char[height, width];
            fireAge = new int[height, width];
            emptyAge = new int[height, width];

            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    double randomValue = random.NextDouble();
                    if (randomValue < 0.6)
                    {
                        forest[row, col] = 'B';
                    }
                    else if (randomValue < 0.8)
                    {
                        forest[row, col] = 'S';
                    }
                    else
                    {
                        forest[row, col] = '-';
                        emptyAge[row, col] = 0;
                    }
                    fireAge[row, col] = 0;
                }
            }

            Console.Clear();
            Console.Title = "Waldbrand Simulation, created 2017 by umu.ch";

            while (true)
            {
                if (Console.KeyAvailable)
                {
                    Console.ReadKey(true);
                    break;
                }

                StartRandomFires();
                SpreadFires();
                UpdateBurntTrees();
                GrowNewTrees();
                DisplayForest();
                System.Threading.Thread.Sleep(1500);
            }
        }

        static void DisplayForest()
        {
            Console.SetCursorPosition(0, 0);

            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    // Use different colors for different states
                    char cell = forest[row, col];
                    switch (cell)
                    {
                        case 'F': // Active fire - red
                            Console.ForegroundColor = ConsoleColor.Red;
                            break;
                        case 'f': // Burned tree - dark red
                            Console.ForegroundColor = ConsoleColor.DarkRed;
                            break;
                        case 'B': // Tree - green
                            Console.ForegroundColor = ConsoleColor.Green;
                            break;
                        case 'S': // Stone - gray
                            Console.ForegroundColor = ConsoleColor.Gray;
                            break;
                        case '-': // Empty - default
                            Console.ForegroundColor = ConsoleColor.White;
                            break;
                    }
                    Console.Write(cell);
                }
                Console.ResetColor();
                if (row < height - 1) Console.WriteLine();
            }

            Console.WriteLine();
            Console.WriteLine();
            Console.Write("Press any key to quit.");
        }

        static void StartRandomFires()
        {
            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    if (forest[row, col] == 'B' && random.NextDouble() < sparkProbability / 10.0)
                    {
                        forest[row, col] = 'F';
                        fireAge[row, col] = 0; // Reset fire age
                    }
                }
            }
        }

        static void SpreadFires()
        {
            char[,] newForest = new char[height, width];
            int[,] newFireAge = new int[height, width];

            // Copy current state
            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    newForest[row, col] = forest[row, col];
                    newFireAge[row, col] = fireAge[row, col];
                }
            }

            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    if (forest[row, col] == 'F')
                    {
                        // Spread fire to neighbors
                        for (int dr = -1; dr <= 1; dr++)
                        {
                            for (int dc = -1; dc <= 1; dc++)
                            {
                                int neighborRow = row + dr;
                                int neighborCol = col + dc;

                                if (neighborRow >= 0 && neighborRow < height &&
                                    neighborCol >= 0 && neighborCol < width)
                                {
                                    if (forest[neighborRow, neighborCol] == 'B')
                                    {
                                        newForest[neighborRow, neighborCol] = 'F';
                                        newFireAge[neighborRow, neighborCol] = 0;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            forest = newForest;
            fireAge = newFireAge;
        }

        static void UpdateBurntTrees()
        {
            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    if (forest[row, col] == 'F')
                    {
                        fireAge[row, col]++;
                        // Fire burns for 2-3 cycles before becoming burned tree
                        if (fireAge[row, col] >= 2)
                        {
                            forest[row, col] = 'f';
                            emptyAge[row, col] = 0; // Reset empty age for burned trees
                        }
                    }
                    else if (forest[row, col] == 'f')
                    {
                        emptyAge[row, col]++;
                        // Burned trees turn to empty ground after 3-5 cycles
                        if (emptyAge[row, col] >= 4)
                        {
                            forest[row, col] = '-';
                            emptyAge[row, col] = 0;
                        }
                    }
                    else if (forest[row, col] == '-')
                    {
                        emptyAge[row, col]++;
                    }
                }
            }
        }

        static void GrowNewTrees()
        {
            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    if (forest[row, col] == '-')
                    {
                        // Trees only grow after the ground has been empty for at least 2 cycles
                        // This prevents immediate regrowth and allows seeing empty forest floor
                        if (emptyAge[row, col] >= 2 && random.NextDouble() < growthProbability / 10.0)
                        {
                            forest[row, col] = 'B';
                            emptyAge[row, col] = 0;
                        }
                    }
                }
            }
        }
    }
}
