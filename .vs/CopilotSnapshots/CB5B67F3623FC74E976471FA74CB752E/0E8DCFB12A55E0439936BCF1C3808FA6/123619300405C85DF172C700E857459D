using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WaldBrand
{
    internal class Program
    {

        static char[,] forest;
        static int[,] fireAge;
        static int[,] emptyAge;
        static int width;
        static int height;
        static double sparkProbability;
        static double growthProbability;
        static Random random = new Random();

        static void Main(string[] args)
        {
            Console.WriteLine("Enter forest width:");
            width = int.Parse(Console.ReadLine());
            Console.WriteLine("Enter forest height:");
            height = int.Parse(Console.ReadLine());
            Console.WriteLine("Enter spark probability (0-10):");
            sparkProbability = double.Parse(Console.ReadLine());
            Console.WriteLine("Enter growth probability (0-10):");
            growthProbability = double.Parse(Console.ReadLine());

            // Set console window and buffer size to accommodate the forest
            try
            {
                // Ensure console can display the full forest
                int requiredHeight = height + 5; // Extra space for UI text
                int requiredWidth = Math.Max(width, 50); // Minimum width for UI text

                // Get maximum possible console size
                int maxWidth = Console.LargestWindowWidth;
                int maxHeight = Console.LargestWindowHeight;

                // Adjust to fit within console limits
                int consoleWidth = Math.Min(requiredWidth, maxWidth);
                int consoleHeight = Math.Min(requiredHeight, maxHeight);

                // Set buffer size first (must be >= window size)
                Console.SetBufferSize(consoleWidth, consoleHeight);
                
                // Then set window size
                Console.SetWindowSize(consoleWidth, consoleHeight);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Warning: Could not resize console window: {ex.Message}");
                Console.WriteLine("Press any key to continue with current console size...");
                Console.ReadKey();
            }

            forest = new char[height, width];
            fireAge = new int[height, width];
            emptyAge = new int[height, width];

            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    double randomValue = random.NextDouble();
                    if (randomValue < 0.6)
                    {
                        forest[row, col] = 'B';
                    }
                    else if (randomValue < 0.8)
                    {
                        forest[row, col] = 'S';
                    }
                    else
                    {
                        forest[row, col] = '-';
                        emptyAge[row, col] = 0;
                    }
                    fireAge[row, col] = 0;
                }
            }

            Console.Clear();
            Console.Title = "Waldbrand Simulation, created 2017 by umu.ch";

            while (true)
            {
                if (Console.KeyAvailable)
                {
                    Console.ReadKey(true);
                    break;
                }

                StartRandomFires();
                SpreadFires();
                UpdateBurntTrees();
                GrowNewTrees();
                DisplayForest();
                System.Threading.Thread.Sleep(500);
            }
        }

        static void DisplayForest()
        {
            // Clear the console and ensure we start from the top
            Console.Clear();
            Console.SetCursorPosition(0, 0);

            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    // Check if we're within console bounds
                    if (col < Console.BufferWidth && row < Console.BufferHeight - 3)
                    {
                        char cell = forest[row, col];
                        switch (cell)
                        {
                            case 'F':
                                Console.ForegroundColor = ConsoleColor.Red;
                                break;
                            case 'f':
                                Console.ForegroundColor = ConsoleColor.DarkRed;
                                break;
                            case 'B':
                                Console.ForegroundColor = ConsoleColor.Green;
                                break;
                            case 'S':
                                Console.ForegroundColor = ConsoleColor.Gray;
                                break;
                            case '-':
                                Console.ForegroundColor = ConsoleColor.White;
                                break;
                        }
                        Console.Write(cell);
                    }
                    else if (col >= Console.BufferWidth)
                    {
                        // If line is too long, truncate it
                        break;
                    }
                }
                Console.ResetColor();
                
                // Only add newline if we're not at the last row and within buffer height
                if (row < height - 1 && row < Console.BufferHeight - 4)
                {
                    Console.WriteLine();
                }
            }

            // Add UI text at the bottom
            if (Console.CursorTop < Console.BufferHeight - 3)
            {
                Console.WriteLine();
                Console.WriteLine();
                Console.Write("Press any key to quit.");
            }
        }

        static void StartRandomFires()
        {
            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    if (forest[row, col] == 'B' && random.NextDouble() < sparkProbability / 10.0)
                    {
                        forest[row, col] = 'F';
                        fireAge[row, col] = 0;
                    }
                }
            }
        }

        static void SpreadFires()
        {
            char[,] newForest = new char[height, width];
            int[,] newFireAge = new int[height, width];

            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    newForest[row, col] = forest[row, col];
                    newFireAge[row, col] = fireAge[row, col];
                }
            }

            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    if (forest[row, col] == 'F')
                    {
                        for (int dr = -1; dr <= 1; dr++)
                        {
                            for (int dc = -1; dc <= 1; dc++)
                            {
                                int neighborRow = row + dr;
                                int neighborCol = col + dc;

                                if (neighborRow >= 0 && neighborRow < height &&
                                    neighborCol >= 0 && neighborCol < width)
                                {
                                    if (forest[neighborRow, neighborCol] == 'B')
                                    {
                                        newForest[neighborRow, neighborCol] = 'F';
                                        newFireAge[neighborRow, neighborCol] = 0;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            forest = newForest;
            fireAge = newFireAge;
        }

        static void UpdateBurntTrees()
        {
            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    if (forest[row, col] == 'F')
                    {
                        fireAge[row, col]++;
                        if (fireAge[row, col] >= 2)
                        {
                            forest[row, col] = 'f';
                            emptyAge[row, col] = 0;
                        }
                    }
                    else if (forest[row, col] == 'f')
                    {
                        emptyAge[row, col]++;
                        if (emptyAge[row, col] >= 4)
                        {
                            forest[row, col] = '-';
                            emptyAge[row, col] = 0;
                        }
                    }
                    else if (forest[row, col] == '-')
                    {
                        emptyAge[row, col]++;
                    }
                }
            }
        }

        static void GrowNewTrees()
        {
            for (int row = 0; row < height; row++)
            {
                for (int col = 0; col < width; col++)
                {
                    if (forest[row, col] == '-')
                    {
                        if (emptyAge[row, col] >= 2 && random.NextDouble() < growthProbability / 10.0)
                        {
                            forest[row, col] = 'B';
                            emptyAge[row, col] = 0;
                        }
                    }
                }
            }
        }
    }
}
